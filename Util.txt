** Book Links:

https://github.com/markjprice/cs12dotnet8/blob/main/docs/book-links.md#chapter-4---writing-debugging-and-testing-functions

---------------------------------------------------------------------------------------------------------------

** App Secret:
- https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-8.0&tabs=windows
- https://learn.microsoft.com/en-us/azure/key-vault/general/overview

---------------------------------------------------------------------------------------------------------------

** Use multiple environments in ASP.NET Core:

- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-8.0

---------------------------------------------------------------------------------------------------------------

** StyleCop:
- https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master
- https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/

---------------------------------------------------------------------------------------------------------------

** .NET Portability Analyzer:

// Useful tool that you can run against your existing applications to generate a report for porting 
- https://learn.microsoft.com/en-us/shows/seth-juarez/brief-look-net-portability-analyzer

---------------------------------------------------------------------------------------------------------------

** C# Source Generators:

- https://github.com/amis92/csharp-source-generators

Source Generators design specification: 
- https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.md

Source Generators samples: 
- https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators

Source Generators cookbook: 
- https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.cookbook.md
 
---------------------------------------------------------------------------------------------------------------

** Migrating from Newtonsoft to new JSON:

- https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to

---------------------------------------------------------------------------------------------------------------
 
** LINQ:

* Enumerable.ToLookup Method:
- https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolookup?view=net-8.0

* Partitioning data (C#):
- https://learn.microsoft.com/en-us/dotnet/csharp/linq/standard-query-operators/partitioning-data

---------------------------------------------------------------------------------------------------------------

* Entity Framework Core

- https://github.com/dotnet/efcore
- https://learn.microsoft.com/en-us/ef/core/


* EF Core conventions:
- https://learn.microsoft.com/en-us/ef/core/modeling/


* Controlling dependency assets:
- https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets


// The dotnet-ef command-line tool is not automatically installed. You must install this package as either a global or local tool.
> dotnet tool list --global

// If an old version is already installed, then update the tool:
> dotnet tool update --global dotnet-ef

// If it is not already installed, then install the latest version:
> dotnet tool install --global dotnet-ef

// To update to the latest .NET preview version available:
> dotnet tool update --global dotnet-ef --version 9.0-*

// You can also remove the tool, as shown in the following command:
> dotnet tool uninstall --global dotnet-ef


* Example to how to use the dotnet-ef tool to generate a model for the Categories and Products tables in a new folder named AutoGenModels in SQLite (ex: Microsoft Northwind DB):
> dotnet ef dbcontext scaffold "Data Source=Northwind.db" Microsoft.EntityFrameworkCore.Sqlite --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations --context NorthwindDb

 - The command action: dbcontext scaffold
 - The connection string: "Data Source=Northwind.db"
 - The database provider: Microsoft.EntityFrameworkCore.Sqlite
 - The tables to generate models for: --table Categories --table Products
 - The output folder: --output-dir AutoGenModels
 - The namespace: --namespace WorkingWithEFCore.AutoGen
 - To use data annotations as well as the Fluent API: --data-annotations
 - To rename the context from [database_name]Context: --context NorthwindDb

 
* Equivalent command in SQL Server: 
- https://github.com/markjprice/cs12dotnet8/blob/main/docs/sql-server/README.md#scaffolding-models-using-an-existing-database.


* To learn how to modify the T4 templates used by the dotnet-ef scaffolding tool, then you can find that information at the following link:
- https://learn.microsoft.com/en-us/ef/core/managing-schemas/scaffolding/templates


* Configuring preconvention models:

// You might want to define a convention to say that all string properties should have a maximum length of 50 characters as a default, 
// or any property types that implement a custom interface should not be mapped, as shown in the following code:

protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
{
  configurationBuilder.Properties<string>().HaveMaxLength(50);
  configurationBuilder.IgnoreAny<IDoNotMap>();
}


* Entity SQL reference:
- https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/entity-sql-reference

---------------------------------------------------------------------------------------------------------------

** Explore NoSQL databases:

* Welcome to Azure Cosmos DB: 
- https://learn.microsoft.com/en-us/azure/cosmos-db/introduction

* Use NoSQL databases as a persistence infrastructure: 
- https://learn.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure

* Document database providers for Entity Framework Core: 
- https://github.com/BlueshiftSoftware/EntityFrameworkCore

---------------------------------------------------------------------------------------------------------------

* Command to list your currently installed templates:
> dotnet new list  (or dotnet new -l or dotnet new --list with older SDKs)


* Add Project in Solution:
> dotnet sln add name_project


* Create a new MVC Project (No authentication):
> dotnet new mvc -au None


* Create a new ClassLib:
> dotnet new classlib -o name_lib
> dotnet new classlib -f netstandard2.0


* Create a old style console project:
> dotnet new console -n name_project --use-program-main

* Create a new xUnit Project:
> dotnet new xunit -o name_testproject


* Create a global.json file that forces the use of the latest .NET Core 6.0 SDK that you have installed
> dotnet --list-sdks
> dotnet new globaljson --sdk-version 6.0.xxx


** Build:

* Build a project and its dependencies using Release configuration:
> dotnet build --configuration Release


** DotNet Pack:
Builds the project and Creates NuGet packages (*.nupkg file)

* Pack the project in the current directory:
> dotnet pack

* Pack the project in the current directory and place the resulting packages into the nupkgs folder
> dotnet pack --output nupkgs 


** SDKs:

* Verifica versoes e avisos de atualizacao das SDKs
> dotnet sdk check


** NuGet:

* Create a NuGet package manually (local: ...\bin\Release\name_package.nupkg):
> dotnet pack -c Release


* Exploring NuGet packages with a tool:
- https://nuget.info


* Hosting your own NuGet feeds:
- https://learn.microsoft.com/en-us/nuget/hosting-packages/overview


---------------------------------------------------------------------------------------------------------------

* ASP.NET CORE:

* Create new Razor page files:
> dotnet new page -n Suppliers --namespace Northwind.Web.Pages


* Razor Class Library com suporte para páginas e visualizações:
> dotnet new razorclasslib -n MinhaBibliotecaRazor --support-pages-and-views


* Run:
> dotnet run --launch-profile https


* More Information: You can read more about managing MS Build items: 
link: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items.


* You can learn more about Build Action and .csproj entries: 
link: https://learn.microsoft.com/en-us/visualstudio/ide/build-actions.


* ASP.NET Core Middleware
link: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-8.0#middleware-order


* Servers & middleware HTTP/3 disabled by default:
link: https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default


* Section about enabling request decompression support:
link: https://github.com/markjprice/cs12dotnet8/blob/main/docs/ch13-enabling-http3.md

 
---------------------------------------------------------------------------------------------------------------

* Chapter 4:

-> XML comment
Ferramenta que converte os comentários em documentação, como o Sandcastle: https://github.com/EWSoftware/SHFB 


-> Add Project Reference:
<ItemGroup>
  <ProjectReference
    Include="..\CalculatorLib\CalculatorLib.csproj" />
</ItemGroup>


-> Throwing and catching exceptions in functions

* Commonly thrown exceptions in functions:

static void Withdraw(string accountName, decimal amount)
{
  if (string.IsNullOrWhiteSpace(accountName))
  {
    throw new ArgumentException(paramName: nameof(accountName));
  }
  if (amount <= 0)
  {
    throw new ArgumentOutOfRangeException(paramName: nameof(amount),
      message: $"{nameof(amount)} cannot be negative or zero.");
  }
  // process parameters
}


* Throwing exceptions using guard clauses:

Exception:
- ArgumentException

Guard clause methods:
- ThrowIfNullOrEmpty, ThrowIfNullOrWhiteSpace

Exception:
- ArgumentNullException

Guard clause methods:
- ThrowIfNull

Exception:
- ArgumentOutOfRangeException

Guard clause methods:
- ThrowIfEqual, ThrowIfGreaterThan, ThrowIfGreaterThanOrEqual, 
  ThrowIfLessThan, ThrowIfLessThanOrEqual, ThrowIfNegative, ThrowIfNegativeOrZero, 
  ThrowIfNotEqual, ThrowIfZero


static void Withdraw(string accountName, decimal amount)
{
  ArgumentException.ThrowIfNullOrWhiteSpace(accountName,
    paramName: nameof(accountName));
  ArgumentOutOfRangeException.ThrowIfNegativeOrZero(amount,
    paramName: nameof(amount));
  // process parameters
}
